{"version":3,"sources":["components/columns.js","components/GlobalFilter.js","components/ColumnFilter.js","components/FiltertingTable.js","App.js","serviceWorker.js","index.js"],"names":["COLUMNS","Header","Footer","accessor","disableFilters","sticky","Cell","value","format","Date","GlobalFilter","filter","setFilter","useState","setValue","onChange","useAsyncDebounce","undefined","e","target","ColumnFilter","column","filterValue","FilteringTable","columns","useMemo","data","MOCK_DATA","defaultColumn","React","Filter","useTable","useFilters","useGlobalFilter","usePagination","getTableProps","getTableBodyProps","headerGroups","footerGroups","page","prepareRow","state","setGlobalFilter","nextPage","previousPage","globalFilter","map","headerGroup","getHeaderGroupProps","headers","getHeaderProps","render","canFilter","row","getRowProps","cells","cell","getCellProps","footerGroup","getFooterGroupProps","getFooterProps","style","textAlign","margin","onClick","marginLeft","App","className","Boolean","window","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.057c0002.chunk.js","sourcesContent":["import { format } from 'date-fns'\n\nexport const COLUMNS = [\n  {\n    Header: 'Id',\n    Footer: 'Id',\n    accessor: 'id',\n    disableFilters: true,\n    sticky: 'left'\n  },\n  {\n    Header: 'First Name',\n    Footer: 'First Name',\n    accessor: 'first_name',\n    sticky: 'left'\n  },\n  {\n    Header: 'Last Name',\n    Footer: 'Last Name',\n    accessor: 'last_name',\n    sticky: 'left'\n  },\n  {\n    Header: 'Date of Birth',\n    Footer: 'Date of Birth',\n    accessor: 'date_of_birth',\n    Cell: ({ value }) => {\n      return format(new Date(value), 'dd/MM/yyyy')\n    }\n  },\n  {\n    Header: 'Country',\n    Footer: 'Country',\n    accessor: 'country'\n  },\n  {\n    Header: 'Phone',\n    Footer: 'Phone',\n    accessor: 'phone'\n  },\n  {\n    Header: 'Email',\n    Footer: 'Email',\n    accessor: 'email'\n  },\n  {\n    Header: 'Age',\n    Footer: 'Age',\n    accessor: 'age'\n  },\n]\n\nexport const GROUPED_COLUMNS = [\n  {\n    Header: 'Id',\n    Footer: 'Id',\n    accessor: 'id'\n  },\n  {\n    Header: 'Name',\n    Footer: 'Name',\n    columns: [\n      {\n        Header: 'First Name',\n        Footer: 'First Name',\n        accessor: 'first_name'\n      },\n      {\n        Header: 'Last Name',\n        Footer: 'Last Name',\n        accessor: 'last_name'\n      }\n    ]\n  },\n  {\n    Header: 'Info',\n    Footer: 'Info',\n    columns: [\n      {\n        Header: 'Date of Birth',\n        Footer: 'Date of Birth',\n        accessor: 'date_of_birth'\n      },\n      {\n        Header: 'Country',\n        Footer: 'Country',\n        accessor: 'country'\n      },\n      {\n        Header: 'Phone',\n        Footer: 'Phone',\n        accessor: 'phone'\n      }\n    ]\n  }\n]\n","import React, { useState } from 'react'\nimport { useAsyncDebounce } from 'react-table'\n\nexport const GlobalFilter = ({ filter, setFilter }) => {\n  const [value, setValue] = useState(filter)\n  const onChange = useAsyncDebounce(value => {\n    setFilter(value || undefined)\n  }, 1000)\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={value || ''}\n        onChange={e => {\n          setValue(e.target.value);\n          onChange(e.target.value);\n        }}\n      />\n    </span>\n  )\n}\n","import React from 'react'\n\nexport const ColumnFilter = ({ column }) => {\n  const { filterValue, setFilter } = column\n  return (\n    <span>\n      Search:{' '}\n      <input\n        value={filterValue || ''}\n        onChange={e => setFilter(e.target.value)}\n      />\n    </span>\n  )\n}\n\n","import React, { useMemo } from 'react'\nimport { useTable, useFilters, useGlobalFilter, usePagination } from 'react-table'\nimport MOCK_DATA from './MOCK_DATA.json'\nimport { COLUMNS } from './columns'\nimport './table.css'\nimport { GlobalFilter } from './GlobalFilter'\nimport { ColumnFilter } from './ColumnFilter'\n\nexport const FilteringTable = () => {\n  const columns = useMemo(() => COLUMNS, [])\n  const data = useMemo(() => MOCK_DATA, [])\n\n  const defaultColumn = React.useMemo(\n    () => ({\n      Filter: ColumnFilter\n    }),\n    []\n  )\n\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    footerGroups,\n    page,\n    prepareRow,\n    state,\n    setGlobalFilter,\n    nextPage,\n    previousPage,\n  } = useTable(\n    {\n      columns,\n      data,\n      defaultColumn\n    },\n    useFilters,\n    useGlobalFilter,\n    usePagination\n  )\n\n  const { globalFilter } = state\n\n  return (\n    <>\n      <GlobalFilter filter={globalFilter} setFilter={setGlobalFilter} />\n      <table {...getTableProps()}>\n        <thead>\n          {headerGroups.map(headerGroup => (\n            <tr {...headerGroup.getHeaderGroupProps()}>\n              {headerGroup.headers.map(column => (\n                <th {...column.getHeaderProps()}>\n                  {column.render('Header')}\n                  <div>{column.canFilter ? column.render('Filter') : null}</div>\n                </th>\n              ))}\n            </tr>\n          ))}\n        </thead>\n        <tbody {...getTableBodyProps()}>\n          {page.map(row => {\n            prepareRow(row)\n            return (\n              <tr {...row.getRowProps()}>\n                {row.cells.map(cell => {\n                  return <td {...cell.getCellProps()}>{cell.render('Cell')}</td>\n                })}\n              </tr>\n            )\n          })}\n        </tbody>\n        <tfoot>\n          {footerGroups.map(footerGroup => (\n            <tr {...footerGroup.getFooterGroupProps()}>\n              {footerGroup.headers.map(column => (\n                <td {...column.getFooterProps()}>{column.render('Footer')}</td>\n              ))}\n            </tr>\n          ))}\n        </tfoot>\n      </table>\n      <div style={{textAlign:'center', margin:'10px'}}>\n        <button onClick={() => previousPage()}> Previous </button>\n        <button onClick={() => nextPage()} style={{marginLeft:'10px'}}> Next Page </button>\n      </div>\n    </>\n  )\n}\n","import React from 'react'\nimport './App.css'\nimport { FilteringTable } from './components/FiltertingTable'\n\nfunction App() {\n  return (\n    <div className='App'>\n      <FilteringTable/>\n    </div>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}